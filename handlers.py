import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from database.db_manager import (
    add_phrase_to_db, get_random_phrase, get_all_phrases, clear_database
)
from utils.translate_api import translate_text
from keyboard import get_main_keyboard, get_new_word_keyboard

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
WAITING_FOR_TRANSLATION = 1
WAITING_FOR_ENGLISH = 2
WAITING_FOR_RUSSIAN = 3

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üìö –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚Äî —Ä–∞—Å—à–∏—Ä—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å.\n"
        "üìñ –ò–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞ ‚Äî –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–π –ø–µ—Ä–µ–≤–æ–¥.\n"
        "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã.\n"
        "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /reset")
    await start(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /translate
async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /translate")
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.")
    return WAITING_FOR_TRANSLATION

async def handle_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {user_message}")
    
    if not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return WAITING_FOR_TRANSLATION
    
    try:
        translated_text = await translate_text(user_message, target_language="en")
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /add")
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
    return WAITING_FOR_ENGLISH

async def get_english_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    english_text = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç: {english_text}")
    
    if not english_text.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return WAITING_FOR_ENGLISH
    
    context.user_data["english_text"] = english_text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.")
    return WAITING_FOR_RUSSIAN

async def get_russian_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    russian_text = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç: {russian_text}")
    
    if not russian_text.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return WAITING_FOR_RUSSIAN
    
    english_text = context.user_data.get("english_text")
    add_phrase_to_db(english_text, russian_text)
    await update.message.reply_text(
        f"–§—Ä–∞–∑–∞ '{english_text}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{russian_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /phrases
async def show_all_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        message_object = query.message
    else:
        message_object = update.message

    phrases = get_all_phrases()
    if phrases:
        message = "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∑—ã:\n" + "\n".join([f"{phrase} - {translation}" for phrase, translation in phrases])
    else:
        message = "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add."
    
    await message_object.reply_text(message, reply_markup=get_main_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /clear
async def clear_database_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /clear")
    clear_database()
    await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!", reply_markup=get_main_keyboard())

# –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)
async def learn_en_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        message_object = query.message
    else:
        message_object = update.message

    phrase, translation = get_random_phrase()
    if not phrase or not translation:
        await message_object.reply_text("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    context.user_data["current_phrase"] = phrase
    context.user_data["current_translation"] = translation
    context.user_data["current_command"] = "learn_en_ru"
    await message_object.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {phrase}")

# –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)
async def learn_ru_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        message_object = query.message
    else:
        message_object = update.message

    phrase, translation = get_random_phrase()
    if not phrase or not translation:
        await message_object.reply_text("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    context.user_data["current_phrase"] = translation
    context.user_data["current_translation"] = phrase
    context.user_data["current_command"] = "learn_ru_en"
    await message_object.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {translation}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text.lower()
    correct_translation = context.user_data.get("current_translation", "").lower()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç: {user_answer}")
    
    if user_answer == correct_translation:
        response = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
    else:
        response = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_translation}"
    
    command = context.user_data.get("current_command")
    if command == "learn_en_ru":
        await learn_en_ru(update, context)
    elif command == "learn_ru_en":
        await learn_ru_en(update, context)
    
    await update.message.reply_text(response, reply_markup=get_main_keyboard())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞

    if query.data == "add_word":
        await add_command(update, context)
    elif query.data == "learn_en_ru":
        await learn_en_ru(update, context)
    elif query.data == "learn_ru_en":
        await learn_ru_en(update, context)
    elif query.data == "show_phrases":
        await show_all_phrases(update, context)
    elif query.data == "translate_text":
        await translate_command(update, context)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(app):
    conv_handler_translate = ConversationHandler(
        entry_points=[CommandHandler("translate", translate_command)],
        states={
            WAITING_FOR_TRANSLATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation)],
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler_translate)

    conv_handler_add = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            WAITING_FOR_ENGLISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_english_text)],
            WAITING_FOR_RUSSIAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_russian_text)],
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler_add)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("learn_en_ru", learn_en_ru))
    app.add_handler(CommandHandler("learn_ru_en", learn_ru_en))
    app.add_handler(CommandHandler("phrases", show_all_phrases))
    app.add_handler(CommandHandler("clear", clear_database_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))
    app.add_handler(CallbackQueryHandler(handle_callback_query))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫